Hello and welcome to this project.

The deal here is that you get an ELB with 1 ECS instance running apache, which autoscales up 
(to a maximum of 2 instances) or down according to the load on the CPU, which is measured by cloudwatch.

How to set this up:

cd into the directory like so:

       cd apache-scaling-group/

To deploy the entire stack, you need a valid  email address that you have access to, and one of 
the existing key pairs in your AWS account. These 2 values should be entered in the parameters.json file.

You can then simply run this command:
   
      aws cloudformation create-stack --stack-name ClojureAutoGroup \ 
          --template-body file://$PWD/albwithec2s.json \ 
          --parameters  file://$PWD/parameters.json

Wait a while, check your CF console, and when the creation is complete, you will hopefully find 
the resulting CF stack ticks all the boxes. 

Comments:

The 20% CPU utilisation threshold mentioned in the list of objectives threshold serves 
as the catalyst for 

a) scaling out the cluster from  1 to 2

AND

b) sending an email

In both cases we're looking at CPUUtilization > 20 for 1 datapoint within 1 minute. The stress 
package is ready installed as well, so you can ssh to the 1st instance and run a typical command:

       stress --cpu 16 --io 4 --vm 2 --vm-bytes 128M --timeout 120s &

for a couple of minutes to thrash it a bit, resulting in the both an email, and a scale-out to the maximum 
of 2 instances in the auto-scaling group.

Finally I've chosen chef-solo to deploy my own (home made for the purpose), very simple tomcat-clojure 
cookbook. Strictly speaking it wouldn't have been necessary to use any configuration management tool at all
(such as puppet, ansible, chef etc) whatsoever as the objectives stated could very easily have been met in 
the UserData section of the CF alone, but as the objectives list seems to imply that it would be nice to 
demonstrate the use of a config management tool, this was the path taken in the end. The cookbook is 
downloaded from my own publicly accessible s3 bucket, again from the UserData section of the CF template, 
and part of an over-arching chef/ directory; just the way I'm used to working at the moment with chef-solo.

FINALLY: you need to use this curl command for final proof of pudding:

       curl -o - http://<ALB endpoint>:8080/clojure-collector-1.1.0-standalone/i

rather than the command shown in the PDF, because curl has changed lately. 
