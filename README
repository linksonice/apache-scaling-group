Hello and welcome to this project.

The deal here is that you get an ELB with 2 ECS instances running apache and php, which autoscales up 
(to a maximum of 3 instances) or down according to the load on the CPU, which is measured by cloudwatch.

How to set this up:

cd into the directory like so:

       cd apache-scaling-group/

To deploy the entire stack, you need a valid  email address that you have access to, and one of 
the existing key pairs in your AWS account. These 2 values should be entered in the parameters.json file.

You can then simply run this command:
   
aws cloudformation create-stack --stack-name ApacheScalingGroup --template-body file://$PWD/albwithec2s.json --parameters  file://$PWD/parameters.json

Wait a while, check your CF console, and when the creation is complete, you will hopefully find 
the resulting CF stack ticks all the boxes. 

Comments:

The 20% CPU utilisation threshold mentioned in the list of objectives threshold serves 
as the catalyst for 

a) scaling out the cluster from  1 to 2

AND

b) sending an email

In both cases we're looking at CPUUtilization > 20 for 1 datapoint within 1 minute. The stress 
package is ready installed as well, so you can ssh to the 1st instance and run a typical command:

       stress --cpu 16 --io 4 --vm 2 --vm-bytes 128M --timeout 120s &

for a couple of minutes to thrash it a bit, resulting in the both an email, and a scale-out to the maximum 
of 2 instances in the auto-scaling group.

In the most recent update, we're proving the load balancer hits BOTH endpoints by installing php, and
making an index.php in the CF itself which displays the host/server IP. This is a simple proof of
concept, to show the load balancer is hitting both end points. The other proviso here is that we run
a minimum/default number of TWO EC2s in the autoscaling group.

The health state of the listeners in the target group will tell you the same as the php echo $localIP.
